% PARTE 1

%i
soma_3(a, b, c, Soma) :- Soma is a + b + c.

%ii
soma_conjunto([], 0).
soma_conjunto([H|T], S) :- soma_conjunto(T, G), S is H + G.

%iii
maior_entre(X,Y,Maior):-
    (X > Y ->
        Maior = X;
        Maior = Y;
    ).

maior_lista[[X], X]. % caso lista so tem 1 elemento
maior_lista[[X|XS], Maior]:-
    maior_lista(Xs, MaiorResto), %encontra o maior no restante da lista
    ( X > MaiorResto
    -> Maior = X;
       Maior = MaiorResto
    ).

media_lista(Valores, Media):-
    soma_conjunto(Valores, Soma),
    length(Valores, NumeroElementos),
    Media is Soma / NumeroElementos.


inserir(E, [], [E]).
inserir(E, [H|T], [E,H|T]):-
    E =< H.
inserir(E, [H|T], [H|TOrd]):-
    E > H, 
    inserir(E, T, TOrd).

ordenar([], [])
ordenar([H|T], ListaOrdenada):-
    ordenar(T, CaudaParcOrd),
    inserir(H, CaudaParcOrd, ListaOrdenada).

par( 0 ).
par( X ), 
    N is X-2
    N >= 0,
    par( N ).

%par(N) :- N mod 2 =:= 0.

impar( 1 ).
impar( X ), 
    N is X-2
    N >= 1,
    impar( N ).

%impar(N) :- N mod 2 =:= 1.

elemento,lista -> {V,F}

pertence( X, [X|L] ).
pertence( X, [Y|L] ):-
    X \= Y,
    pertence( X, L).

quantos( [], 0).
quantos( [X|L], N):-
    pertence(X,L),
    quantos(L,N).
quantos( [X|L], N1) :-
    nao( pertence(X,L) ),
    quantos(L, N), N1 is N+1.


elemento,lista,resultado -> {V;F}

apagar (X, [X|R], R).
apagar (X, [Y|R], [Y|L]) :-
    X \= Y,
    apagar(X,R,L).

elemento,lista,resultado -> {V;F}

adicionar( X, L, L):-
    pertence(X, L).
adicionar(X, L, [X,L]):-
    nao(pertence(X,l)).

list1,lista2,resultado -> {V;F}

concatenar([], L2, L2).
concatenar( [X|R], L2, [X|L]):-
    concatenar(R,L2, L).

inverter([], []).
inverter([X|R], NL) :-
    inverter(R,L),
    concatenar(L, [X], NL).

sublista(S, L):-
    concatenar(L1, L3, L),
    concatenar(S, L2, L3).


soma_tres_valores(A, B, C, Soma) :-
    Soma is A + B + C.

soma_lista([], 0).
soma_lista([H|T], Soma) :-
    soma_lista(T, SomaResto),
    Soma is H + SomaResto.

%iii. Construir a extensão de um predicado que calcule o maior valor entre dois valores;
maior_entre_dois(X, Y, Maior):-
    X > Y-> Maior is X;
    Maior is Y.
    
%iv. Construir a extensão de um predicado que calcule o maior de um conjunto de valores;
maior_de_lista([], 0).
maior_de_lista([H|T], Maior):-
	maior_de_lista(T, MaiorCauda),
    (  H > MaiorCauda ->  Maior = H;
    Maior = MaiorCauda).

%v. Construir a extensão de um predicado que calcule a média aritmética de um conjunto de valores;
media_lista([], 0).
media_lista([H|T], Media):-
    soma_lista([H|T], Soma),
    length([H|T], Comprimento),
    Media is Soma/Comprimento.
	
        
%vi. Construir a extensão de um predicado que ordene de modo crescente uma sequência de valores;
ordena_crescente([], 0).
%ordena_crescente([H|T], ListaOrdenada).


%viii. Construir a extensão do predicado «pertence» que verifica se um elemento existe dentro de uma lista de elementos;
pertence(X, [X|_]).
pertence(X, [H|T]):-
    X \== H,
    pertence(X, T).

%ix. Construir a extensão do predicado «comprimento» que calcula o número de elementos existentes numa lista;
comprimento([], 0).
comprimento([_|T], Comp):-
	comprimento(T, CompCauda),
	Comp is CompCauda + 1.

%x. Construir a extensão do predicado «diferentes» que calcula a quantidade de elementos diferentes existentes numa lista;
diferentes([], 0).
diferentes([H|T], Quantidade) :-
    pertence(H, T),
    diferentes(T, Quantidade).
diferentes([_|T], Quantidade) :-
    diferentes(T, QuantidadeResto),
    Quantidade is QuantidadeResto + 1.
    

%xi. Construir a extensão do predicado «apaga1» que apaga a primeira ocorrência de um elemento de uma lista;
%xii. Construir a extensão do predicado «apagaT» que apaga todas as ocorrências de um dado elemento numa lista;
%xiii. Construir a extensão do predicado «adicionar» que insere um elemento numa lista, sem o repetir;
%xiv. Construir a extensão do predicado «concatenar», que resulta na concatenação dos elementos da lista L1 com os elementos da lista L2;
%xv. Construir a extensão do predicado «inverter» que inverte a ordem dos elementos de uma lista;
%xvi. Construir a extensão do predicado «sublista» que determina se uma lista S é uma sublista de outra lista L.